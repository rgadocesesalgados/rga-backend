// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  tel        String   @unique
  password   String
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Client {
  id         String   @id @default(uuid())
  name       String
  tel        String   @unique
  address_id String
  address    Address  @relation(fields: [address_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  order      Order[]

  @@map("clients")
}

model Address {
  id                  String   @id @default(uuid())
  rua                 String
  numero              Int
  bairro              String
  ponto_de_referencia String
  cidade              String
  frete_moto          Float?   @default(5)
  frete_carro         Float?   @default(10)
  address_complete    String?
  created_at          DateTime @default(now())
  updated_at          DateTime @default(now())
  client              Client[]
  order               Order[]

  @@map("addresses")
}

model Product {
  id            String         @id @default(uuid())
  name          String
  price         Float
  min_quantity  Int
  banner        String         @default("")
  category_name String
  category      Category       @relation(fields: [category_name], references: [name])
  stock         Stock?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  order_product OrderProduct[]

  @@map("products")
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  product    Product[]

  @@map("categories")
}

model Bolo {
  id         String    @id @default(uuid())
  order      Order     @relation(fields: [order_id], references: [id])
  order_id   String
  peso       Float?
  recheio    Recheio[]
  massa      String?
  cobertura  String?
  decoracao  String?
  banner     String    @default("")
  topper     Topper?   @relation(fields: [topper_id], references: [id])
  topper_id  String?   @unique
  price      Float?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@map("bolos")
}

model Topper {
  id          String   @id @default(uuid())
  bolo        Bolo?
  tema        String
  name        String?
  idade       Int?
  price       Float    @default(15)
  description String?
  banner      String   @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@map("toppers")
}

model Recheio {
  id            String   @id @default(uuid())
  name          String
  price         Float
  is_pesado     Boolean  @default(false)
  to_bento_cake Boolean  @default(true)
  banner        String   @default("")
  bolo          Bolo[]
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  @@map("recheios")
}

model Order {
  id            String         @id @default(uuid())
  client        Client         @relation(fields: [client_id], references: [id])
  client_id     String
  date          DateTime
  bolo          Bolo[]
  orderProduct  OrderProduct[]
  cor_forminhas String?
  observations  String?
  delivery      Boolean        @default(false)
  type_frete    TypeFrete?     @default(FRETE_MOTO)
  value_frete   Float?
  address_id    String?
  address       Address?       @relation(fields: [address_id], references: [id])
  payment       Payment[]
  total         Float
  status        Status         @default(RASCUNHO)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())

  @@map("orders")
}

enum TypeFrete {
  FRETE_MOTO
  FRETE_CARRO
}

enum Status {
  RASCUNHO
  ANOTADO
  EM_PRODUCAO
  ENTREGUE
  CANCELADO
}

model Payment {
  id         String      @id @default(uuid())
  order_id   String
  order      Order       @relation(fields: [order_id], references: [id])
  type       PaymentType @default(DINHEIRO)
  value      Float
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())

  @@map("payments")
}

enum PaymentType {
  DINHEIRO
  PIX
  CARTAO_DE_CREDITO
  CARTAO_DE_DEBITO
  DUPLICATA
}

model OrderProduct {
  id         String   @id @default(uuid())
  order_id   String
  order      Order    @relation(fields: [order_id], references: [id])
  product_id String
  product    Product  @relation(fields: [product_id], references: [id])
  quantity   Int
  price      Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("order_products")
}

model Stock {
  id         String   @id @default(uuid())
  quantity   Int
  product_id String   @unique
  product    Product  @relation(fields: [product_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("stocks")
}
